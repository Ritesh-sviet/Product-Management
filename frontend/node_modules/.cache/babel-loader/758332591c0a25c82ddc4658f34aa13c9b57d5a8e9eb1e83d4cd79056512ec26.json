{"ast":null,"code":"import * as Yup from \"yup\";\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\nexport const loginInitialValue = {\n  email: \"\",\n  password: \"\"\n};\nexport const loginValidationSchema = Yup.object({\n  email: Yup.string(),\n  password: Yup.string()\n  // email: Yup.string().email('Invalid email address').required('Required !'),\n  // password: Yup.string().min(6, \"minimum six character required !\").required(\"Required !\")\n});\nexport const staffInitialValue = {\n  first_name: \"\",\n  last_name: \"\",\n  address_line_1: \"\",\n  address_line_2: \"\",\n  country: \"\",\n  state: \"\",\n  city: \"\",\n  zip_code: \"\",\n  phone: \"\",\n  email: \"\",\n  password: \"\",\n  parent: \"0\",\n  status: \"\"\n};\nexport const staffValidationSchema = Yup.object({\n  first_name: Yup.string().min(2, \"insert atleast two character\").required(\"first name is required\"),\n  last_name: Yup.string().min(2, \"insert atleast two character\").required(\"last name is required\"),\n  address_line_1: Yup.string().required(\"Address is requires\"),\n  address_line_2: Yup.string(),\n  country: Yup.string().required(\"country is reuired\"),\n  state: Yup.string().required(\"state is required\"),\n  city: Yup.string().required(\"city is required\"),\n  zip_code: Yup.number().min(2, \"insert atleast two character\").required(\"zip code is required\"),\n  phone: Yup.string().matches(phoneRegExp, 'Phone number is not valid').min(2, \"insert atleast two character\").required(),\n  email: Yup.string().email().min(2, \"insert atleast two character\").required(),\n  password: Yup.string().matches(/(?=.*[a-zA-Z])(?=.*\\d)/, 'Password must contain both letters and numbers').min(6, \"password must be of atlease 6 character\").required(),\n  parent: Yup.string().required()\n});","map":{"version":3,"names":["Yup","phoneRegExp","loginInitialValue","email","password","loginValidationSchema","object","string","staffInitialValue","first_name","last_name","address_line_1","address_line_2","country","state","city","zip_code","phone","parent","status","staffValidationSchema","min","required","number","matches"],"sources":["/home/meghnab/Desktop/product management/frontend/src/form_validations/index.js"],"sourcesContent":["import * as Yup from \"yup\";\n\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\nexport const loginInitialValue = {\n    email: \"\",\n    password: \"\",\n};\n\nexport const loginValidationSchema = Yup.object({\n    email: Yup.string(),\n    password: Yup.string()\n    // email: Yup.string().email('Invalid email address').required('Required !'),\n    // password: Yup.string().min(6, \"minimum six character required !\").required(\"Required !\")\n})\n\nexport const staffInitialValue = {\n    first_name: \"\",\n    last_name: \"\",\n    address_line_1: \"\",\n    address_line_2: \"\",\n    country: \"\",\n    state: \"\",\n    city: \"\",\n    zip_code: \"\",\n    phone: \"\",\n    email: \"\",\n    password: \"\",\n    parent: \"0\",\n    status: \"\",\n};\n\nexport const staffValidationSchema = Yup.object({\n    first_name: Yup.string().min(2, \"insert atleast two character\").required(\"first name is required\"),\n    last_name: Yup.string().min(2, \"insert atleast two character\").required(\"last name is required\"),\n    address_line_1: Yup.string().required(\"Address is requires\"),\n    address_line_2: Yup.string(),\n    country: Yup.string().required(\"country is reuired\"),\n    state: Yup.string().required(\"state is required\"),\n    city: Yup.string().required(\"city is required\"),\n    zip_code: Yup.number().min(2, \"insert atleast two character\").required(\"zip code is required\"),\n    phone: Yup.string().matches(phoneRegExp, 'Phone number is not valid').min(2, \"insert atleast two character\").required(),\n    email: Yup.string().email().min(2, \"insert atleast two character\").required(),\n    password: Yup.string().matches(/(?=.*[a-zA-Z])(?=.*\\d)/,'Password must contain both letters and numbers').min(6, \"password must be of atlease 6 character\").required(),\n    parent: Yup.string().required(),\n})\n\n\n\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAE1B,MAAMC,WAAW,GAAG,yGAAyG;AAC7H,OAAO,MAAMC,iBAAiB,GAAG;EAC7BC,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE;AACd,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAGL,GAAG,CAACM,MAAM,CAAC;EAC5CH,KAAK,EAAEH,GAAG,CAACO,MAAM,CAAC,CAAC;EACnBH,QAAQ,EAAEJ,GAAG,CAACO,MAAM,CAAC;EACrB;EACA;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,iBAAiB,GAAG;EAC7BC,UAAU,EAAE,EAAE;EACdC,SAAS,EAAE,EAAE;EACbC,cAAc,EAAE,EAAE;EAClBC,cAAc,EAAE,EAAE;EAClBC,OAAO,EAAE,EAAE;EACXC,KAAK,EAAE,EAAE;EACTC,IAAI,EAAE,EAAE;EACRC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,EAAE;EACTd,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE,EAAE;EACZc,MAAM,EAAE,GAAG;EACXC,MAAM,EAAE;AACZ,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAGpB,GAAG,CAACM,MAAM,CAAC;EAC5CG,UAAU,EAAET,GAAG,CAACO,MAAM,CAAC,CAAC,CAACc,GAAG,CAAC,CAAC,EAAE,8BAA8B,CAAC,CAACC,QAAQ,CAAC,wBAAwB,CAAC;EAClGZ,SAAS,EAAEV,GAAG,CAACO,MAAM,CAAC,CAAC,CAACc,GAAG,CAAC,CAAC,EAAE,8BAA8B,CAAC,CAACC,QAAQ,CAAC,uBAAuB,CAAC;EAChGX,cAAc,EAAEX,GAAG,CAACO,MAAM,CAAC,CAAC,CAACe,QAAQ,CAAC,qBAAqB,CAAC;EAC5DV,cAAc,EAAEZ,GAAG,CAACO,MAAM,CAAC,CAAC;EAC5BM,OAAO,EAAEb,GAAG,CAACO,MAAM,CAAC,CAAC,CAACe,QAAQ,CAAC,oBAAoB,CAAC;EACpDR,KAAK,EAAEd,GAAG,CAACO,MAAM,CAAC,CAAC,CAACe,QAAQ,CAAC,mBAAmB,CAAC;EACjDP,IAAI,EAAEf,GAAG,CAACO,MAAM,CAAC,CAAC,CAACe,QAAQ,CAAC,kBAAkB,CAAC;EAC/CN,QAAQ,EAAEhB,GAAG,CAACuB,MAAM,CAAC,CAAC,CAACF,GAAG,CAAC,CAAC,EAAE,8BAA8B,CAAC,CAACC,QAAQ,CAAC,sBAAsB,CAAC;EAC9FL,KAAK,EAAEjB,GAAG,CAACO,MAAM,CAAC,CAAC,CAACiB,OAAO,CAACvB,WAAW,EAAE,2BAA2B,CAAC,CAACoB,GAAG,CAAC,CAAC,EAAE,8BAA8B,CAAC,CAACC,QAAQ,CAAC,CAAC;EACvHnB,KAAK,EAAEH,GAAG,CAACO,MAAM,CAAC,CAAC,CAACJ,KAAK,CAAC,CAAC,CAACkB,GAAG,CAAC,CAAC,EAAE,8BAA8B,CAAC,CAACC,QAAQ,CAAC,CAAC;EAC7ElB,QAAQ,EAAEJ,GAAG,CAACO,MAAM,CAAC,CAAC,CAACiB,OAAO,CAAC,wBAAwB,EAAC,gDAAgD,CAAC,CAACH,GAAG,CAAC,CAAC,EAAE,yCAAyC,CAAC,CAACC,QAAQ,CAAC,CAAC;EACtKJ,MAAM,EAAElB,GAAG,CAACO,MAAM,CAAC,CAAC,CAACe,QAAQ,CAAC;AAClC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}